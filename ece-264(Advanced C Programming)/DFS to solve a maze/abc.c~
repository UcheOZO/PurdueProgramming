#include "answer06.h"
#include <stdio.h>
#define EAST 1
#define SOUTH 2
#define WEST 3
#define NORTH 4

//-----counts number of spaces in the maze---//
int space_number(char** maze, int w, int h)
{
  int i=0; 
  int j=0;
  int n=0;
  for(i=0;i<h;i++)
    {
      for(j=0;j<w;j++)
	{
	  if(maze[i][j]==' ')
	    {
	      n++;
	    }
	}
    }
  return n;
}

//----functions help cross the maze---//
void cross_maze(char** maze, int w, int h, int i,int j,int ctr,int n) //i= current row, j=current column, ctr=counter variable
{ 
  int dir=0;//direction
  char direction;//direction in terms of N S E W
  if(ctr!=n)
    {
      if((j+1<w) && (maze[i][(j+1)]!='X') && (maze[(i+1)][j]!='X') && (maze[(i+1)][j]!='.'))
	{
	  printf("%c %d\n", 'E', 1);
	  maze[i][j]='.';
	  j=j+1;
	  ctr=ctr + 1;
	  dir=EAST;
	  cross_maze(maze,w,h,i,j,ctr,n);
	}

      else if((i+1<h) && (maze[(i+1)][j]!='X') && (maze[(i+1)][j]!='X') && (maze[(i+1)][j]!='.'))
	{
	  printf("%c %d\n", 'S', 1);
	  maze[i][j]='.';
	  i=i+1;
	  ctr=ctr + 1;
	  dir=SOUTH;
	  cross_maze(maze,w,h,i,j,ctr,n);
	}

      else if((j-1>0) && (maze[i][(j-1)]!='X') && (maze[(i+1)][j]!='X') && (maze[(i+1)][j]!='.'))
	{
	  printf("%c %d\n", 'W', 1);
	  maze[i][j]='.';
	  j=j-1;
	  ctr=ctr + 1;
	  dir=WEST;
	  cross_maze(maze,w,h,i,j,ctr,n);
	}
      else
	{
	  maze[i][j]='.';
	}

      /* else if((i-1>0) && (maze[(i-1)][j]!='X') && (maze[(i+1)][j]!='X') && (maze[(i+1)][j]!='.')) */
      /* 	{ */
      /* 	  printf("%c %d\n", 'N', 1); */
      /* 	  maze[i][j]='.'; */
      /* 	  i=i-1; */
      /* 	  ctr=ctr + 1; */
      /* 	  dir=NORTH; */
      /* 	  cross_maze(maze,w,h,i,j,ctr,n); */
      /* 	} */

      if(dir==EAST)
	{
	  direction='W';
	  printf("%c %d\n",direction,1);
	}
      else if(dir==SOUTH)
	{
	  direction='N';
	  printf("%c %d\n",direction,1);
	}
      else if(dir==WEST)
	{
	  direction='E';
	  printf("%c %d\n",direction,1);
	}
      else if(dir==NORTH)
	{
	  direction='S';
	  printf("%c %d\n",direction,1);
	}
    }
}



void print_directions(char** maze, int w, int h)
{
  int ctr=0;//loop variable
  int i=0;//rows
  int j=0;//columns
  int n=0;//number of elements in the maze
  //calculate current column
  while(maze[i][j]!=' ')
    {
      j++;
    }
  n=space_number(maze,w,h);
  cross_maze(maze,w,h,i,j,ctr,n);
}
