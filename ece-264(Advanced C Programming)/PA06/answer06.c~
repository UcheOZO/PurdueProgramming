#include "answer06.h"
#include <stdio.h>

#define EAST 1
#define SOUTH 2
#define WEST 3
#define NORTH 4
#define NEUTRAL 5

#define TRUE 1
#define FALSE 0

//-----counts number of elements in the maze---//
int space_number(char** maze, int w, int h)
{
  int i=0; 
  int j=0;
  int n=0;
  for(i=0;i<h;i++)
    {
      for(j=0;j<w;j++)
	{
	  if(maze[i][j]==' ')
	    {
	      n++;
	    }
	}
    }
  return n;
}

int squareAt(char * * maze, int w, int h, int row, int col)
{
  if(row >= 0 && col >= 0 && row < h && col < w)
    return maze[row][col];
  return -1;
}

int canMove(char * * maze, int w, int h, int row, int col, int direction)
{
  switch(direction) {
  case EAST:  return squareAt(maze, w, h, row+0, col+1) == ' ';
  case SOUTH: return squareAt(maze, w, h, row+1, col+0) == ' ';
  case WEST:  return squareAt(maze, w, h, row+0, col-1) == ' ';
  case NORTH: return squareAt(maze, w, h, row-1, col+0) == ' ';
  }
  return FALSE; // Really this is a fatal error
}

//----functions help cross the maze---//
void cross_maze(char** maze, int w, int h, int i,int j,int* ctr,int n) //i= current row, j=current column, ctr=counter variable
{ 
  int dir=NEUTRAL;//direction
  int opt=3;//number of options at each position
  char direction;//direction in terms of N S E W
  if(*ctr!=n)
    {
      if(canMove(maze, w, h, i, j, EAST))
	{
	  printf("%c %d\n", 'E', 1);
	   maze[i][j]='.';
	  dir=EAST;
	}
      else
	{
	  opt--;
	}
      if((i+1<h) && (maze[(i+1)][j]!='X') && (maze[(i+1)][j]!='o') && (dir!=EAST))
	{
	  printf("%c %d\n", 'S', 1);
	  maze[i][j]='.';
	  dir=SOUTH;
	}
      else
	{
	  opt--;
	}
      if((j-1>0) && (maze[i][(j-1)]!='X') && (maze[(i)][j-1]!='o') && ((dir!=EAST) && (dir!=SOUTH)))
	{
	  printf("%c %d\n", 'W', 1);
	  maze[i][j]='.';
	  dir=WEST;
	}
      else
	{
	  opt--;
	}
      if((i-1>0) && (maze[i-1][(j)]!='X') && (maze[(i-1)][j]!='o') && (((dir!=EAST) && (dir!=SOUTH) && (dir!=WEST))))
	{
	  printf("%c %d\n", 'N', 1);
	  dir=NORTH;
	  maze[i][j]='o';
	  *ctr=*ctr + 1;
	}
      else
	{
	  opt--;
	}

      if(opt==-1)
	{
	  maze[i][j]='o';
	  *ctr=*ctr+1;
	}
      else
      	{
	  if(((dir==WEST)) && (opt<3))
	    {
	      maze[i][j]='o';
	      *ctr=*ctr + 1;
	    }

	  if(dir==EAST)
	    {
	      j=j+1;
	    }
	  else if(dir==SOUTH)
	    {
	      i=i+1;
	    }
	  else if(dir==WEST)
	    {
	      j=j-1;
	    }
	  else if(dir==NORTH)
	    {
	      i=i-1;
	    }

          cross_maze(maze,w,h,i,j,ctr,n);

	  if(dir==EAST)
	    {
	      direction='W';
	      printf("%c %d\n",direction,1);
	    }
	  else if(dir==SOUTH)
	    {
	      direction='N';
	      printf("%c %d\n",direction,1);
	    }
	  else if(dir==WEST)
	    {
	      direction='E';
	      printf("%c %d\n",direction,1);
	    }
	  else if(dir==NORTH)
	    {
	      direction='S';
	      printf("%c %d\n",direction,1);
	    }
	}

    }
}



void print_directions(char** maze, int w, int h)
{
  int ctr1=0;//loop variable
  int* ctr= &ctr1;
  int i=0;//rows
  int j=0;//columns
  int n=0;//number of elements in the maze
  //calculate current column

  // Find the entrance of the maze
  while(maze[i][j]!=' ')
    {
      j++;
    }

  // Record the total number of spaces in the maze
  n=space_number(maze,w,h);
  while(*ctr!=n)
    {
      cross_maze(maze,w,h,i,j,ctr,n);
    }
}

